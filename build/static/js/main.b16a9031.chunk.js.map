{"version":3,"sources":["store.js","Answers.js","Histori.js","App.js","serviceWorker.js","index.js"],"names":["story","state","arguments","length","undefined","action","type","id","countries","rundom_num","store","createStore","combineReducers","history","concat","Object","toConsumableArray","sort","Answers","_ref","answer","className","onClick","react_default","a","createElement","e","capital","subscribe","getState","Histori","console","log","this","Consoler","map","value","key","name","Histori_Story_cauntries","Component","Story_cauntries","App","props","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","RandomInteger","min","max","rand","Math","random","round","On_chenge","setState","monitor","Rundom_for","dispatch","answers","On_right","result","isLoad","question","answer_lenth","monitor_mount","animation","grean_shine","React","createRef","bind","assertThisInitialized","fetch","then","res","json","_this2","catch","error","items","i","push","Rundom_item","_this3","ref","src_Answers","src_Histori","On_clear","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b16a9031.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\n\r\nconst story =(state={}, action)=>{\r\n    switch(action.type){\r\n        case \"ADD_HISTORY\":\r\n        return{\r\n            id:state.length,\r\n            countries: action.countries,\r\n            rundom_num: action.rundom_num\r\n        }\r\n    }\r\n}\r\n\r\nconst history = (state = [], action) =>{\r\n    switch(action.type){\r\n        case \"ADD_HISTORY\":\r\n        return[\r\n            ...state,\r\n            story(state,action)\r\n        ]\r\n        case \"CLEAR_STORY\":\r\n        return [\r\n\r\n        ]\r\n\r\n        default:\r\n        return state\r\n        \r\n    }\r\n}\r\n\r\nconst countries = (state = [], action) =>{\r\n    switch(action.type){\r\n        case \"ADD_COUNTRYS\":\r\n        return[\r\n            ...action.state\r\n        ]\r\n        default:\r\n        return[\r\n            ...state\r\n        ]\r\n    }\r\n}\r\n\r\nconst sort=(state=\"SORT_BY_DATE\",action)=>{\r\n    switch(action.type){\r\n        case \"SORT_BY_RIGHT\":\r\n        return \"SORT_BY_RIGHT\"\r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\n\r\nconst store = createStore(\r\n    combineReducers({history,countries,sort}))\r\n\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst Answers = ({answer, className,onClick}) =>\r\n <div className={className} onClick={(e)=>onClick(e)}>\r\n     <p>{answer.capital}</p>\r\n </div>\r\n\r\n\r\nexport default Answers;","import React,{Component} from 'react';\r\nimport store from './store'\r\n\r\nlet history = [];\r\n\r\nstore.subscribe(()=>{\r\n    history = store.getState().history\r\n    }\r\n)\r\n\r\n\r\n\r\nclass Histori extends Component{\r\n    Consoler(){\r\n\r\n\r\n        console.log(\"store.getState().history - \",store.getState().history);\r\n        \r\n        console.log(\"history - \",history);\r\n        \r\n    }\r\n    render(){\r\n        this.Consoler()\r\n        if(history[0]){\r\n            return(\r\n                <div className=\"history\">\r\n                    {history.map((value,key)=>\r\n                            <p className=\"historiName\" key = {key}> {value.countries[value.rundom_num].name+\": \"} \r\n                                {value.countries.map((value,key)=>\r\n                                    <Story_cauntries value={value} key={key}/>\r\n                                )}\r\n                            </p>\r\n                        )}\r\n                </div>\r\n            )\r\n        }else  \r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n} \r\n\r\n\r\n\r\nconst Story_cauntries = ({value}) =>\r\n    <span className=\"countryName\"  >\r\n        {value.capital + \", \"} \r\n    </span>\r\n\r\n\r\n\r\nexport default Histori; ","import React, { Component } from 'react';\nimport store from './store.js'\nimport './App.css';\nimport Answers from './Answers.js';\nimport { unmountComponentAtNode } from 'react-dom';\nimport Histori from './Histori'\n\nconst API = \"https://restcountries.eu/rest/v2/all\";\n\n\nclass App extends Component {\n  constructor(props, context){\n    super(props, context);   \n    this.state = {\n        monitor:0,\n        result:0,\n        isLoad: false,\n        answers: [],\n        question: \"\",\n        answer_lenth:4,\n        rundom_num: this.RandomInteger(0,3),\n        monitor_mount:10,\n        animation: \" \"\n    }\n    this.grean_shine = React.createRef();\n    this.RandomInteger = this.RandomInteger.bind(this);\n    this.Rundom_for = this.Rundom_for.bind(this);\n};\n\nasync componentDidMount() {\n    fetch(API)\n        .then(res => res.json())\n        .then((result)=>{\n            store.dispatch({\n                type:\"ADD_COUNTRYS\",\n                state: result\n            })\n            this.Rundom_for(store.getState().countries)\n        })\n    .catch((error)=>console.log(error))\n}\n\n\n//вертає випадкове число\nRandomInteger = (min, max) => {\n    var rand = min - 0.5 + Math.random() * (max - min + 1)\n    rand = Math.round(rand);\n    return rand;\n  }\n\n//створює масив випадкових чисел і переводить в масив країн в Rundom_item\nRundom_for(items){\n      let answers = [];\n        for (let i = 0; i < this.state.answer_lenth; i++) {\n          answers.push(this.Rundom_item(items));\n          this.setState({\n              answers\n          })  \n      } \n\n      this.setState({\n          isLoad:true\n      })\n}\n\nRundom_item(items){\n    let i = items[this.RandomInteger(0,249)];\n    if(i.capital === \"\" || i.capital === undefined){\n        return this.Rundom_item(items);\n    }else return i\n}\n\n\nOn_chenge = (e) =>{\n    this.setState({\n        monitor: this.state.monitor + 1,\n        rundom_num: this.RandomInteger(0,3)\n\n    })\n\n    this.Rundom_for(store.getState().countries);\n\n    store.dispatch({\n        type: \"ADD_HISTORY\",\n        countries: this.state.answers,\n        rundom_num: this.state.rundom_num\n    })\n    }\n\n\nOn_right = (e) => {\n    this.setState({\n        result: this.state.result + 1\n    });\n    this.On_chenge(e);\n}\n\nOn_clear(){\n    this.setState({\n        monitor:0,\n        result:0\n    })\n\n    store.dispatch({\n        type: \"CLEAR_STORY\"\n    })\n}\n\n  render() {\n    const answers = this.state.answers;\n    const rundom_num = this.state.rundom_num;\n        if(this.state.isLoad){\n            if(this.state.monitor_mount !== this.state.monitor){\n         return (\n            <div className=\"app\">\n                <div className=\"for_2h\">  \n                    <h2 className={this.state.animation} ref={this.grean_shine}>{this.state.monitor_mount}: всього</h2>\n                    <h2 className={this.state.animation} ref={this.grean_shine}>{this.state.monitor}: пройдено</h2>\n                    <h2 className={this.state.animation} ref={this.grean_shine}>{this.state.result} : правильних </h2>\n                </div>\n                <h1 className=\"app\">{answers[rundom_num].name}</h1>\n               {answers.map((answer,key)=>\n               <Answers onClick={rundom_num === key ? this.On_right : this.On_chenge} answer = {answer}  key = {key}\n                className = {\"answer\"}/> \n               )}\n                \n                <Histori/>\n\n            </div> \n            )\n        }else return (\n            <div className=\"app\">\n\n                <h2>{this.state.result} : правильних відповіді з {this.state.monitor_mount}</h2>\n                <h1 onClick={()=>this.On_clear()}>Почати спочатку</h1>\n            </div>\n        )\n    }            \n        return(\n            <div>\n                 Не працює інтернет або ви все зломали\n            </div>\n        )\n          \n    }\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}